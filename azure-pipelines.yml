# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  frameworkVersion: '3.2.6'

jobs:
- job: RunTestsOnWindows
  pool:
    vmImage: 'windows-latest'
  steps:
    - task: PowerShell@2
      condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      inputs:
        targetType: 'inline'
        script: |
          $tags = git tag --sort=-creatordate   
          $tag = $tags[0]
          Write-Host "##vso[task.setvariable variable=frameworkVersion]$tag"

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: '(Get-Content ''Ocaramba.sln'' -raw) -replace [regex](''.*?'' + ''Documentation'' + (''.*?\r\n'' * (5 + 1))) | set-content  ''Ocaramba.sln'''

    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: Assembly-Info-NetCore@2
      inputs:
        Path: '$(Build.SourcesDirectory)'
        FileNames: '**/*.csproj'
        InsertAttributes: false
        FileEncoding: 'auto'
        WriteBOM: false
        GeneratePackageOnBuild: true
        VersionNumber: '$(frameworkVersion)'
        FileVersionNumber: '$(frameworkVersion).$(Build.BuildId)'
        InformationalVersion: '$(frameworkVersion)'
        PackageVersion: '$(frameworkVersion)'
        LogLevel: 'verbose'
        FailOnWarning: false
        DisableTelemetry: false

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/v:minimal'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: VisualStudioTestPlatformInstaller@1
      inputs:
        packageFeedSelector: 'nugetOrg'
        versionSelector: 'latestStable'

    - task: PowerShell@2
      inputs:
        filePath: './ExecutingTestsOnWindowsAzure.ps1'
        
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/Ocaramba.Tests.*.xml'
        
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: './Ocaramba/bin/Release/Ocaramba.$(frameworkVersion).nupkg'
        artifact: 'Ocaramba$(frameworkVersion)'
        publishLocation: 'pipeline'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: './OcarambaLite/bin/Release/OcarambaLite.$(frameworkVersion).nupkg'
        artifact: 'OcarambaLite$(frameworkVersion)'
        publishLocation: 'pipeline'
        
- job: RunTestsOnDocker
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up -d --build'

    - task: PowerShell@2
      inputs:
        filePath: './ExecutingTestsOnDockerAzure.ps1'
        
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/Ocaramba.Tests.*.xml'